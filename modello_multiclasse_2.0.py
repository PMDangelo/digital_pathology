# -*- coding: utf-8 -*-
"""Copia di prova_modello_multiclasse_definitivo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Si_stU25y0uqHqUTMT4Hi8Tr2Z1Pb-fX
"""

!head -n 4 bf.py

from bf2 import *

T=np.load("dati/tiles.npy")
M=np.load("dati/masks.npy")

masks=split_enumerate_and_marge_n(masks)

cls_dict=crea_dic_from_merged_masks_n(masks)

n_classes=max(cls_dict.values())
n_classes

masks=np_augmentation(masks)
images=np_augmentation(images)

n=np.random.randint(len(images))
print(n)
plot_img_label_MC(images[n],masks[n],cls_dict,n_classes=n_classes)

X_val, Y_val, C_val, X_trn, Y_trn, C_trn=split_train_val_MC(images,masks,cls_dict=cls_dict )
print('number of images: %3d' % len(images))
print('- training:       %3d' % len(X_trn))
print('- validation:     %3d' % len(X_val))

model = create_model_auto_grid(images, masks, basedir = 'Models', name="prima_prova_MCD", n_classes=n_classes )

model=train_model(model, X_trn, Y_trn,C_trn,X_val,Y_val,C_val,epochs=100)

#model = StarDist2D(None, name='primo_modello_MCD', basedir='Models')

Y_val_pred, res_val_pred = tuple(zip(*[model.predict_instances(x, n_tiles=model._guess_n_tiles(x), show_tile_progress=False)
              for x in X_val[:]]))

i = 16
plot_img_label_MC(X_val[i],Y_val[i], C_val[i], lbl_title="label GT",n_classes=n_classes)
plot_img_label_MC(X_val[i],Y_val_pred[i], class_from_res(res_val_pred[i]), lbl_title="label Pred",n_classes=n_classes)

plot_metrics(Y_val, Y_val_pred)

i=np.random.randint(len(X_val))
print(i)
plot_img_label_MC(X_val[i],Y_val[i], cls_dict, lbl_title="label GT",n_classes=n_classes)
plot_img_label_MC(X_val[i],Y_val_pred[i], class_from_res(res_val_pred[i]), lbl_title="label Pred",n_classes=n_classes)

for x in range(len(X_val)):
  plot_img_label_MC(X_val[x],Y_val[x], cls_dict, lbl_title="label GT",n_classes=n_classes)
  plt.savefig('predizioni_primo_modello/label_'+str(x))
  plt.close()
  plot_img_label_MC(X_val[x],Y_val_pred[x], class_from_res(res_val_pred[x]), lbl_title="label Pred",n_classes=n_classes)
  plt.savefig('predizioni_primo_modello/prediction_'+str(x))
  plt.close()

